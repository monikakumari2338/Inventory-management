package com.inventory.purchaseorder.serviceimpl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.inventory.purchaseorder.entity.PurchaseOrderItems;
import com.inventory.purchaseorder.entity.Stores;
import com.inventory.purchaseorder.dto.Productdto;
import com.inventory.purchaseorder.dto.PurchaseOrderCombineddto;
import com.inventory.purchaseorder.dto.PurchaseOrderItemsdto;
import com.inventory.purchaseorder.dto.purchaseOrderItemDetailsdto;
import com.inventory.purchaseorder.entity.Category;
import com.inventory.purchaseorder.entity.Product;
import com.inventory.purchaseorder.entity.ProductDetails;
import com.inventory.purchaseorder.entity.PurchaseOrder;
import com.inventory.purchaseorder.repository.PurchaseOrderItemDetailsRepo;
import com.inventory.purchaseorder.repository.PurchaseOrderItemsRepo;
import com.inventory.purchaseorder.repository.PurchaseOrderRepo;
import com.inventory.purchaseorder.service.PurchaseOrderService;
import com.inventory.purchaseorder.entity.purchaseOrderItemDetails;

@Service
public class PurchaseOrderServiceImpl implements PurchaseOrderService {

	@Autowired
	private PurchaseOrderItemsRepo itemsRepo;

	@Autowired
	private PurchaseOrderItemDetailsRepo itemDetailsRepo;

	@Autowired
	private PurchaseOrderRepo purchaseOrderRepo;

	@Override
	public PurchaseOrderItemsdto savePurchaseOrderItems(PurchaseOrderItemsdto PurchaseOrderItemsdto1) {
		PurchaseOrder item = purchaseOrderRepo.findByPoNumber(PurchaseOrderItemsdto1.getPoNumber());
		PurchaseOrderItems items = new PurchaseOrderItems(
				PurchaseOrderItemsdto1.getItemNumber(),PurchaseOrderItemsdto1.getItemName(), PurchaseOrderItemsdto1.getExpectedQty(),
				PurchaseOrderItemsdto1.getCategory(), item);
		PurchaseOrderItems item1 = itemsRepo.save(items);
		return PurchaseOrderItemsdto1;
	}

	@Override
	public purchaseOrderItemDetailsdto savepurchaseOrderItemDetails(purchaseOrderItemDetailsdto POitemDetails) {

		PurchaseOrderItems items = itemsRepo.findByitemNumber(POitemDetails.getItemNumber());
		purchaseOrderItemDetails itemDetails = new purchaseOrderItemDetails(POitemDetails.getColor(),
				POitemDetails.getPrice(), POitemDetails.getStoreref(), POitemDetails.getSize(),
				POitemDetails.getStock(), POitemDetails.getImageData(), items);
		purchaseOrderItemDetails purchaseOrderItemDetails1=itemDetailsRepo.save(itemDetails);
		return POitemDetails;
	}

	@Override
	public PurchaseOrderCombineddto displayPO(int poNumber) {
		PurchaseOrder purchaseOrder = purchaseOrderRepo.findByPoNumber(poNumber);
		List<PurchaseOrderItems> purchaseOrderItems = itemsRepo.findAllByPurchaseOrder(purchaseOrder);
		
		List<purchaseOrderItemDetails> POItemDetail= new ArrayList<>();
		for(int i=0;i<purchaseOrderItems.size();i++)
		{
			POItemDetail.addAll(itemDetailsRepo.findAllByItems(purchaseOrderItems.get(i)));
		}
		PurchaseOrderCombineddto purchaseOrderCombineddto=new PurchaseOrderCombineddto();
		purchaseOrderCombineddto.setPurchaseOrderItemsdto(purchaseOrderItems);
		purchaseOrderCombineddto.setPurchaseOrderItemDetailsdto(POItemDetail);
		return purchaseOrderCombineddto;
	}

	@Override
	public List<PurchaseOrderCombineddto> saveProducts(List<PurchaseOrderCombineddto> PurchaseOrderCombineddto) {
	
		for(int i=0;i<PurchaseOrderCombineddto.size();i++)
		{
		PurchaseOrder item = purchaseOrderRepo.findByPoNumber(PurchaseOrderCombineddto.get(i).getPurchaseOrderItemsdto().get(i).getPurchaseOrder().getPo_Number());
		if (item == null) {
			PurchaseOrderItems items = new PurchaseOrderItems(
					PurchaseOrderCombineddto.get(i).getPurchaseOrderItemsdto().get(i).getItemNumber(),PurchaseOrderCombineddto.get(i).getPurchaseOrderItemsdto().get(i).getItemName(), PurchaseOrderCombineddto.get(i).getPurchaseOrderItemsdto().get(i).getExpectedQty(),
					PurchaseOrderCombineddto.get(i).getPurchaseOrderItemsdto().get(i).getCategory(), item);
			PurchaseOrderItems item1 = itemsRepo.save(items);

			Product product2 = productRepo.findByitemNumber(PurchaseOrderCombineddto.get(i).getProductdto().getItemNumber());
			ProductDetails productDetails2 = new ProductDetails(PurchaseOrderCombineddto.get(i).getProductDetailsdto().getColor(),
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getPrice(),
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getSize(),
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getStock(),
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getImageData(), store, product2);

			productDetailsRepo.save(productDetails2);

		} else {
			ProductDetails productDetails1 = productDetailsRepo.findByColorAndSizeAndStoreAndProduct(
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getColor(),
					PurchaseOrderCombineddto.get(i).getProductDetailsdto().getSize(), store, product);
			int Prev_stock;
			int new_stock;
			int total_stock = 0;

			if (productDetails1 != null) {
				Prev_stock = productDetails1.getStock();
				new_stock = PurchaseOrderCombineddto.get(i).getProductDetailsdto().getStock();
				total_stock = Prev_stock + new_stock;
				productDetails1.setStock(total_stock);
				productDetailsRepo.save(productDetails1);
			}

			else {
				ProductDetails productDetails2 = new ProductDetails(
						PurchaseOrderCombineddto.get(i).getProductDetailsdto().getColor(),
						PurchaseOrderCombineddto.get(i).getProductDetailsdto().getPrice(),
						PurchaseOrderCombineddto.get(i).getProductDetailsdto().getSize(),
						PurchaseOrderCombineddto.get(i).getProductDetailsdto().getStock(),
						PurchaseOrderCombineddto.get(i).getProductDetailsdto().getImageData(), store, product);
				productDetailsRepo.save(productDetails2);
			}

		}

		return null;
	}

}
