package com.inventory.purchaseorder.serviceimpl;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.inventory.purchaseorder.entity.Stores;
import com.inventory.purchaseorder.dto.ProductCombineddto;
import com.inventory.purchaseorder.dto.ProductDetailsdto;
import com.inventory.purchaseorder.dto.Productdto;
import com.inventory.purchaseorder.entity.Category;
import com.inventory.purchaseorder.entity.Product;
import com.inventory.purchaseorder.entity.ProductDetails;
import com.inventory.purchaseorder.repository.CategoryRepo;
import com.inventory.purchaseorder.repository.ProductDetailsRepo;
import com.inventory.purchaseorder.repository.ProductRepo;
import com.inventory.purchaseorder.repository.StoreRepo;
import com.inventory.purchaseorder.service.ProductService;

@Service
public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	@Autowired
	private CategoryRepo categoryRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Override
	public ProductCombineddto saveProducts(ProductCombineddto productCombineddto) {

		ProductCombineddto productCombineddto1 = new ProductCombineddto();
		Stores store = storeRepo.findByStoreName(productCombineddto.getProductDetailsdto().getStore());
		Category category = categoryRepo.findByCategory(productCombineddto.getProductdto().getCategoryName());

		Product product = productRepo.findByitemNumber(productCombineddto.getProductdto().getItemNumber());
		if (product == null) {

			Product product1 = new Product(productCombineddto.getProductdto().getItemNumber(),
					productCombineddto.getProductdto().getItemName(), category);

			Productdto Productdto = new Productdto(product1.getItemNumber(), product1.getitemName(),
					productCombineddto.getProductdto().getCategoryName());
			productRepo.save(product1);
			productCombineddto1.setProductdto(Productdto);

			Product product2 = productRepo.findByitemNumber(productCombineddto.getProductdto().getItemNumber());
			ProductDetails productDetails2 = new ProductDetails(productCombineddto.getProductDetailsdto().getColor(),
					productCombineddto.getProductDetailsdto().getPrice(),
					productCombineddto.getProductDetailsdto().getSize(),
					productCombineddto.getProductDetailsdto().getStock(),
					productCombineddto.getProductDetailsdto().getImageData(), store, product2);

			productDetailsRepo.save(productDetails2);

		} else {
			ProductDetails productDetails1 = productDetailsRepo.findByColorAndSizeAndStoreAndProduct(
					productCombineddto.getProductDetailsdto().getColor(),
					productCombineddto.getProductDetailsdto().getSize(), store, product);

			int Prev_stock = productDetails1.getStock();
			int new_stock = productCombineddto.getProductDetailsdto().getStock();
			int total_stock = Prev_stock + new_stock;
			
			productDetails1.setStock(total_stock);
			productDetailsRepo.save(productDetails1);
		}

//			ProductDetailsdto productDetailsdto = new ProductDetailsdto(productDetails2.getColor(),
//					productDetails2.getPrice(), productDetails2.getSize(), productDetails2.getStock(),
//					productDetails2.getImageData(), productCombineddto.getProductDetailsdto().getStore(),
//					productCombineddto.getProductDetailsdto().getItemNumber());

		// productCombineddto1.setProductDetailsdto(productDetailsdto);

		return productCombineddto1;

	}
}
